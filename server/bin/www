#!/usr/bin/env node

// module dependencies
const app = require("../app");
const debug = require("debug")("express-basics:server");
const http = require("http");
const normalizePort = require("normalize-port");
const config = require("../config/Key");
const { PORT } = config;

// get port from environment and store in express
const port = normalizePort(PORT);
app.set("port", port);

// create http server

const server = http.createServer(app);

// normailze port into a number , string , or false

const normalizeport = (val) => {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};
const onError = (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle error
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
};
const onListening = () => {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
};

// listen on provided port
server.listen(port, () => {
  console.log(`Server running on at ${port}`);
});
server.on("error", onError);
server.on("listening", onListening);
